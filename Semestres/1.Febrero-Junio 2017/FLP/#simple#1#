#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 1285 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 10 #"**********"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;;; Interpretador Simple"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56
#";; La definici\303\263n BNF para las expresiones del lenguaje:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;  <program>       ::= <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;                      <a-program (exp)>"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;  <expression>    ::= <number>"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;                      <lit-exp (datum)>"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;                  ::= <identifier>"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;                      <var-exp (id)>"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;                  ::= <primitive> ({<expression>}*(,))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;                      <primapp-exp (prim rands)>"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;  <primitive>     ::= + | - | * | add1 | sub1 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 10 #"**********"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 10 #"**********"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";Especificaci\303\263n L\303\251xica"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"white-sp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 41
#";Especificaci\303\263n Sint\303\241ctica (gram\303\241tica)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 7 #"lit-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 13 #"; (expression"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #"; (primitive"
0 0 17 3 1 #" "
0 0 17 3 3 #"\"(\""
0 0 17 3 2 #" ("
0 0 17 3 14 #"separated-list"
0 0 17 3 1 #" "
0 0 17 3 10 #"expression"
0 0 17 3 1 #" "
0 0 17 3 3 #"\",\""
0 0 17 3 1 #")"
0 0 17 3 4 #"\")\")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 13 #";primapp-exp)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 3 #" ) "
0 0 14 3 13 #"primitiva-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 2 #"\"+"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 8 #"add-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 2 #"\"-"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 14 #"substract-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 2 #"\"*"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 9 #"mult-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"add1"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 9 #"incr-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"sub1"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 9 #"decr-prim"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";Tipos de datos para la sintaxis abstracta de la gram\303\241tica"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";Construidos manualmente:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(define-datatype program program?"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (a-program"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   (exp expression?)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(define-datatype expression expression?"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (lit-exp"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";   (datum number?))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (var-exp"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   (id symbol?))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";  (primapp-exp"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";   (prim primitive?)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";   (rands (list-of expression?))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(define-datatype primitive primitive?"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (add-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";  (substract-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  (mult-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  (incr-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";  (decr-prim))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Construidos autom\303\241ticamente:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 11 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 11 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";*******************************************************************"
 #"**"
) 0 0 17 11 11 #"***********"
0 0 17 3 11 #"***********"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";Parser, Scanner, Interfaz"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";El FrontEnd (An\303\241lisis l\303\251xico (scanner) y sint\303\241"
 #"ctico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 11 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 11 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";El Interpretador (FrontEnd + Evaluaci\303\263n + se\303\261al para "
 #"lectura )"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"--> "
0 0 19 3 1 #"\""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-program"
0 0 24 3 2 #"  "
0 0 14 3 3 #"pgm"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 11 #"***********"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";El Interprete"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";eval-program: <programa> -> numero"
0 0 24 29 1 #"\n"
0 0 17 11 75
(
 #"; funci\303\263n que eval\303\272a un programa teniendo en cuenta un"
 #" ambiente dado (se "
) 0 0 17 3 31 #"inicializa dentro del programa)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-program"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 24 3 2 #" ("
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Ambiente inicial"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"empty-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";eval-expression: <expression> <enviroment> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; evalua la expresi\303\263n en el ambiente de entrada"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"lit-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"primitiva-exp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 17 #"aplicar-primitiva"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      )"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"aplicar-primitiva"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"add-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"substract-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"mult-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"incr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"decr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 26 #";(primapp-exp (prim rands)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 15 #";             ("
0 0 17 3 3 #"let"
0 0 17 3 3 #" (("
0 0 17 3 4 #"args"
0 0 17 3 2 #" ("
0 0 17 3 23 #"eval-rands rands env)))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 48 #";               (apply-primitive prim args))))))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 22 #";(list prim args))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; funciones auxiliares para aplicar eval-expression a cada elemento "
 #"de una "
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; lista de operandos (expresiones)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 9 #"eval-rand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";apply-primitive: <primitiva> <list-of-expression> -> numero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-primitive"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"add-prim"
0 0 24 3 5 #" () ("
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"substract-prim"
0 0 24 3 5 #" () ("
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"mult-prim"
0 0 24 3 5 #" () ("
0 0 14 3 7 #"funcion"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"incr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"decr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"funcion"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"op"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 2 #"op"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 7 #"funcion"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 14 3 2 #"op"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 11 #"***********"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Ambientes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 4 #"vals"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";empty-env:      -> enviroment"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 10 #")))       "
0 0 17 3 43 #";llamado al constructor de ambiente vac\303\255o "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";extend-env: <list-of symbols> <list-of numbers> enviroment -> envir"
 #"oment"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";funci\303\263n que crea un ambiente extendido"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46
#";funci\303\263n que busca un s\303\255mbolo en un ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 7 #"binding"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 3 #"~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 18 #"list-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 8 #"********"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";Funciones Auxiliares"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #"; funciones auxiliares para encontrar la posici\303\263n de un s\303"
 #"\255mbolo"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #"; en la lista de s\303\255mbolos de unambiente"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 3 #")) "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"list-index-r"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 11 81
(
 #";*******************************************************************"
 #"*************"
) 0 0 17 3 10 #"**********"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Pruebas"
0 0 24 29 1 #"\n"
0 9         361 21           0 0           0 59 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 18 #"show-the-datatypes"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"add1(x)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"add1(   x   )%cccc\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"add1(  +(5, x)   )%cccc\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"just-scan"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"add1(  +(5, %ccccc x) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"add1(x)\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"add1(   x   )%cccc\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"add1(  +(5, x)   )%cccc\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 10 #"scan&parse"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"add1(  +(5, %cccc"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"x)) \""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 5 #"caso1"
0 0 17 3 2 #" ("
0 0 17 3 11 #"primapp-exp"
0 0 17 3 2 #" ("
0 0 17 3 9 #"incr-prim"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 7 #"lit-exp"
0 0 17 3 1 #" "
0 0 17 3 5 #"5))))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 10 #"exp-numero"
0 0 17 3 2 #" ("
0 0 17 3 7 #"lit-exp"
0 0 17 3 1 #" "
0 0 17 3 3 #"8))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 9 #"exp-ident"
0 0 17 3 2 #" ("
0 0 17 3 7 #"var-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"c))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 7 #"exp-app"
0 0 17 3 2 #" ("
0 0 17 3 11 #"primapp-exp"
0 0 17 3 2 #" ("
0 0 17 3 8 #"add-prim"
0 0 17 3 3 #") ("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 10 #"exp-numero"
0 0 17 3 1 #" "
0 0 17 3 12 #"exp-ident)))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 8 #"programa"
0 0 17 3 2 #" ("
0 0 17 3 9 #"a-program"
0 0 17 3 1 #" "
0 0 17 3 9 #"exp-app))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 21 #"una-expresion-dificil"
0 0 17 3 2 #" ("
0 0 17 3 11 #"primapp-exp"
0 0 17 3 2 #" ("
0 0 17 3 10 #"mult-prim)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 44 #";                                          ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 11 #"primapp-exp"
0 0 17 3 2 #" ("
0 0 17 3 10 #"incr-prim)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 62
#";                                                            ("
0 0 17 3 4 #"list"
0 0 17 3 2 #" ("
0 0 17 3 7 #"var-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"v)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 67
#";                                                                 ("
0 0 17 3 7 #"var-exp"
0 0 17 11 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"y)))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 49 #";                                               ("
0 0 17 3 7 #"var-exp"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 2 #"x)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 48 #";                                              ("
0 0 17 3 7 #"lit-exp"
0 0 17 3 1 #" "
0 0 17 3 7 #"200))))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 20 #" un-programa-dificil"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 14 #"    (a-program"
0 0 17 3 1 #" "
0 0 17 3 23 #"una-expresion-dificil))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
